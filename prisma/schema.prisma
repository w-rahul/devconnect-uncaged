// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CREATOR
  CONTRIBUTOR
  VIEWER
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id              String @id @default(uuid())
  name            String?
  username        String @unique
  email           String @unique 
  passwordHashed  String
  role            Role @default(VIEWER)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  projects            Project[] @relation("UserProjects")
  projectMembers      ProjectMember[]
  codesumbmissions    CodeSubmission[]
  chats               Chat[]

}

model Project {
  id                String @id @default(uuid())
  name              String @unique
  description       String
  techStack         String[]
  creatorID         String
  creator           User @relation("UserProjects", fields: [creatorID], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  members           ProjectMember[]
  submissions       CodeSubmission[]
  chats             Chat[]
}

model ProjectMember {
  id                String @id @default(uuid())
  projectID         String
  project           Project @relation(fields: [projectID], references: [id])
  userID            String
  user              User @relation(fields: [userID], references: [id])
  role              Role
  joinedAt          DateTime @default(now())
  
}

model CodeSubmission {
  id                String @id @default(uuid())
  projectID         String
  project           Project @relation(fields: [projectID], references: [id])
  contributorID      String 
  contributor       User @relation(fields: [contributorID], references: [id])
  filePath          String
  status            SubmissionStatus @default(PENDING)
  submittedAt       DateTime  @default(now())
  reviewedAt        DateTime?

}

model Chat {
  id                String @id @default(uuid())
  projectID         String
  project           Project @relation(fields: [projectID], references: [id])
  userID            String
  user              User @relation(fields: [userID], references: [id])
  message           String
  createdAt         DateTime @default(now())

}

